// 函数模块 //
//----------------------------------------------------------------------
//---------------------------
// 列表查询 //

// 遍历列表函数
@mixin eachList($attr, $list: (none)) {
    @for $item from 1 through length($list) {
        #{$attr}: nth($list, $item);
    }
}
// 选择选定列表内容函数
@function queryList($list, $index: (1)) {
    $reList: ();
    @for $item from 1 through length($index) {
        $reList: append($reList, nth($list, nth($index, $item)));
    }
    @return $reList;
}
// 获取2个 attrName 列表内容
@function GetTwoAN($n1: 1, $n2: 2) {
    @return queryList($AN, ($n1, $n2));
}
// 获取3个 attrName 列表内容
@function GetThreeAN($n1: 1, $n2: 2, $n3: 3) {
    @return queryList($AN, ($n1, $n2, $n3));
}
// 获取4个 attrName 列表内容
@function GetFourAN($n1: 1, $n2: 2, $n3: 3, $n4: 4) {
    @return queryList($AN, ($n1, $n2, $n3, $n4));
}
//---------------------------
// Map查询 //

// 遍历Map列表函数
@mixin eachList_ForMap($map: (name: ('name'))) {
    // Map结构 map: ( key: ( value1 value2 ) )
    @each $attr, $list in $map {
        @include eachList($attr, $list);
    }
}
// 选择单个Map中单个列表函数
@mixin choseList_ForMap($map: (), $index: 1) {
    // Map结构 map: ( key: ( value1 value2 ) )
    @each $attr, $list in $map {
        #{$attr}: nth($list, $index);
    }
}
// 遍历单个Map多个列表函数
@mixin eachMoreList_ForMap($map: (), $index: (1)) {
    // Map结构 map: ( key: ( value1 value2 ) )
    @each $attr, $list in $map {
        @include choseList($attr, $list, $index);
    }
}
// 选择单个Map多个列表函数
@mixin choseMoreList_ForMap($map: (), $index: (1)) {
    @each $attr, $list in $map {
        @include choseList($attr, $list, $index);
    }
}
//---------------------------
// 计算生成 //

// 计算最小宽度与设计稿字体形成的比例
@mixin math_minWidth($w, $fz) {
    @include min_w($w) {
        html {
            font-size:  round($w / $fz * 100);
        }
    }
}
// 类生成器同前缀 
@mixin createSameBegin($name: 'same', $differ: (), $number: 12) {
    // differ结构 differ: ( key: ( value1 value2 ) )
    @for $item from 1 through $number {
        .#{$name}-#{$item} {
            @include choseList_ForMap($differ, $item);
            @content;
        }
    }
}
// 类生成器同后缀
@mixin createSameAfter($name: 'same', $differ: (), $number: 12) {
    // differ结构 differ: ( key: ( value1 value2 ) )
    @for $item from 1 through $number {
        .#{$item}-#{$name} {
            @include choseList_ForMap($differ, $item);
            @content;
        }
    }
}
// 子元素生成器
@mixin MoreNth($el, $arrayNumber) {
    @for $item from 0 through $arrayNumber {
        #{$el}:nth-child(#{$item}) {
            @content;
        }
    }
}
// 创建mixin方法
@mixin CM($attrName: (), $value: ()) {
    @for $i from 1 through length($attrName) {
        #{nth($attrName, $i)}: nth($value, $i);
        @content;
    }
}